#include <iostream>
#include <chrono>

void bubbleSort(int *arr, int n){
  bool swap;
  int i, j, k;
  j = n - 1;
  do {
	  swap = false;
	  for (i = 0; i < j; i++) {
		  if (arr[i] > arr[i+1]) {
			  k = arr[i];
			  arr[i] = arr[i+1];
			  arr[i+1] = k;
			  swap = true;
		  }
	  }
	  j--;
  } while (swap);
}

void insertionSort(int *arr, int n){
  int i, j, k;
  for (i = 1; i < n; i++) {
	  k = arr[i];
	  j = i - 1;
	  while (j >= 0 && arr[j] > k) {
		  arr[j+1] = arr[j];
		  j = j - 1;
	  }
	  arr[j+1] = k;
  }
}

void selectionSort(int *arr, int n){
  int i, j, k, min;
  for (i = 0; i < n-1; i++) {
	  k = i;
	  min = arr[i];
	  for (j = i+1; j < n; j++) {
		  if (arr[j] < min) {
			  min = arr[j];
			  k = j;
		  }
	  }
	  arr[k] = arr[i];
	  arr[i] = min;
  }
}

void timeSort(void (*sort), int *arr, int n){
  std::chrono::duration<double> elapsed_seconds = end-start;
  std::time_t end_time = std::chrono::system_clock::to_time_t(end);
  std::cout << "done at " << std::ctime(&end_time)
  sort(arr, n);
}

bool isSorted(int* arr, int n){
  for(int i = 0; i < n-1; i++){
    if(arr[i] > arr[i+1]){
      return false;
    }
  }
  return true;
}

int main(){
  int n = 100;
  int* arr = new int[n];

  void(*sort)(int*, int);
  sort = bubbleSort;
  runSort(sort, arr, n);
  sort = insertionSort;
  runSort(sort, arr, n);
  sort = selectionSort;
  runSort(sort, arr, n);

  return 0;
}
